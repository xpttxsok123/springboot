##mysql分表

- 垂直分表: 解决单表列过多的问题
- 水平分表: 解决但表行过多的问题

```
   entry relationship（ER分片）相关联的表放在一个库里面，避免跨库查询
   
```

####mysql分表策略
- 一致性hash：ID数据随机分布，对旧数据有影响，加表后需要rehash
- 范围切分：ID数据均匀分布，对旧数据无影响，加表后指定ID的范围
- 取模运算：数据分布均匀，对旧数据有影响，加表后需要对所有的数据重新取模
- 日期拆分：每个表的数据量取决于用户行为，新增表对就数据无影响，指定新表数据落表的时间范围



####分库分表需要考虑的问题
  0. 跨库join `避免跨库join`
  1. 将关联表划分在用一个库里面
  2. 应用层面坚决不能使用join，采用RPC服务接口调用替换
        2. `注意` 应用层服务之间调用避免循环调用接口，采用 采用list参数避免 
  3. 全剧局表，数据字段，数据变更比较少的表可以做成公共服务
  4. 空间换时间，经常查询的字段做字段冗余
        4. 订单表里面存放商家ID，商家名称(冗余)
  5. 跨库，跨表分页，排序(后管系统用到)
  6. 多表mysql的自增ID需要改造
        6. UUID,性能太慢，空间暂用
        6. snowflake算法
        6. redis 批量自增
  8. 事务问题
  
  
####权衡与规划
  - 提起预测，规划，做好数据量的预测
  - 
  -
  
  
####mysql主从 `绝大部分数据写少度多，因为读多，所以用多个从节点释放压力`
   0. 一主一从
        0. 1主，1从 【从节点释放压力，负载均衡】
   1. 一主多从
        1. 1主，1从 【从节点释放压力，负载均衡】
   2. 多主多从
        1. n主，1从 【主从节点释放压力，负载均衡】 

